#!/usr/bin/perl

use warnings;
use strict;
use Config::ApacheFormat;
use IO::Handle;
use Log::Log4perl;
use DateTime::Format::HTTP;
use File::Path;

our $VERSION = 0.2;
my $SHORT_NAME = "purge_media";
my $LOOP_DELAY_SECONDS = 5400;

# This script will typically run at least once every day
# if we find media files much older than a few days beyond
# the keep_days threshold, perhaps something has gone badly wrong.
# Maybe the clock is wrong? For safety, stop and request admin help!
my $DELETE_WINDOW_DAYS = 180;

STDERR->autoflush(1);
STDOUT->autoflush(1);

# Ininitialise logging
Log::Log4perl->easy_init($Log::Log4perl::DEBUG);
my $log = Log::Log4perl::get_logger("");
$log->info("$SHORT_NAME v$VERSION starting");

my $config = read_config();

# Main loop - regularly purge audio channels
while(1) {
	process_channels();
	$log->info("sleeping for $LOOP_DELAY_SECONDS until next run");
	sleep $LOOP_DELAY_SECONDS;
}



sub process_channels {

	my $config_dir = $config->{recorder_config_path};
	opendir CONFIG_DIR, $config_dir or do {
		$log->warn("unable to open directory $config_dir");
		return;
	};

	while(my $config_file = readdir CONFIG_DIR) {
		$config_file =~ m/^\d+\.conf$/ or next;
		process_channel("$config_dir/$config_file");
	}

	closedir CONFIG_DIR;
}




############
# Strategy
# There are two ways we could approach this:
#
#  1. Look at all channel configuration files, then look for corresponding
#     media files to purge.
#
#  2. Look for media files, then see if we have a corresponding channel
#     configuration.
#
# As loggers may share storage, yet be unaware of another logger's channel
# configuration, we make each logger responsible for purging it's own files.
# This means it will not touch another logger's files (and we therefore need
# another check to ensure there's no orphaned audio). It also means we don't
# have to parse huge directory/object trees, as we're only looking for our
# own files, rather than parsing every possible file looking for a channel
# that we know about.
#
# This script is passed the location of a channel configuration file. It will
# then purge files relating to that channel.
############




sub process_channel {

	my $config_file = shift;

	# Read configuration from specified file
	$config_file && -e $config_file or do {
		$log->logdie("configuration file unspecified or missing.\nUsage: $0 [config file]\n");
	};

	$log->info("reading configuration file: $config_file");

	my $c = Config::ApacheFormat->new();
	$c->read($config_file) or do {
		$log->error("ERROR reading configuration file $config_file : $!");
		return;
	};

	my $channel_id = $c->get('channel_id') or $log->fatal("no channel_id specified in configuration") && exit;
	my $keep_days  = $c->get('keep_days')  or $log->fatal("no keep_days specified in configuration - doing nothing") && exit;

	unless($keep_days && $keep_days =~ m/^\d+$/) {
		$log->error("keep_days appears to be zero or not an integer - skipping this channel");
		return;
	};

	$log->info("channel_id : $channel_id");
	$log->info("  keep_days: $keep_days");

	purge_local_storage($channel_id, $keep_days);
}



sub purge_local_storage {

	my $channel_id = shift;
	my $keep_days = shift;

	$log->info("purging local storage...");

	my $media_dir = "$config->{audio_log_path}/$channel_id";
	opendir DIR, $media_dir or do {
		$log->warn("unable to open directory $media_dir");
		return;
	};

	while(my $date_dir = readdir DIR) {

		$date_dir =~ m/^\d\d\d\d-\d\d-\d\d$/ or do {
			$log->debug("$date_dir is not a date - skipping");
			next;
		};

		my $dir_dt = DateTime::Format::HTTP->parse_datetime($date_dir) or do {
			$log->warn("failed to parse file/directory name $date_dir - skipping");
			next;
		};

		$log->debug("processing $date_dir");

		if(ok_to_delete($dir_dt, $keep_days)){
			$log->info("deleting $media_dir/$date_dir");
			File::Path::remove_tree("$media_dir/$date_dir") or do {
				$log->error("ERROR deleting tree $media_dir/$date_dir $!");
			};
			sleep 1;
		}
	}

	$log->info("done purging local storage.");
}

sub ok_to_delete {

	my $dt_file = shift;
	my $keep_days = shift;
	my $days = DateTime->today->delta_days($dt_file)->in_units('days');

	$log->debug("age: $days");

	# Is this outside our safety period
	if (($days - $keep_days) > $DELETE_WINDOW_DAYS) {
 		$log->warn("There are media files more than $DELETE_WINDOW_DAYS older than the purge time");
		$log->warn("This is unexpected, as we usually purge files every day. Perhaps the clock is wrong?");
		$log->warn("Stopping this process and waiting for manual intervention.");
		exit;
	}
	elsif($days > $keep_days) {
		$log->debug("OK to delete");
		return 1;
	}

	$log->debug("KEEP");
	return 0;
}

  
sub read_config {

	# Returns a hash reference populated with needed configuration parameters
	# This is run before logging is initialised, so cannot use Log4perl output
	my $rv = {};
	
	my $config_file = $ARGV[0] || '/etc/npb.conf';
	my $c = Config::ApacheFormat->new();

	$c->read($config_file) or do {
		$log->error("ERROR reading configuration file $config_file : $!");
		die;
	};

	foreach my $key('audio_log_path', 'recorder_config_path') {
		$rv->{$key} = $c->get($key) or do {
			$log->error("ERROR: $key is not defined or invalid in the configuration_file");
			die;
		};
	}

	return $rv;	
}
