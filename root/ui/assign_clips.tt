<!DOCTYPE html>

<!--
    This file is part of GOALS-logger, a broadcast audio logging system by:
       Nick Prater
       Andrew White
       Paul Kelly

    Copyright (C) 2012 NP Broadcast Limited.

    GOALS-logger is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    GOALS-logger is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with GOALS-logger.  If not, see <http://www.gnu.org/licenses/>.
-->

[% USE Date %]
[% USE HTML %]

<html lang="en">
	<head>
		<meta charset="utf-8">
		<title>talkSPORT GOALS</title>

		[% INSERT goals.css %]
		
	</head>
	<body>

		<div id="source_list_container">

			<div class="profile_name">[% c.session.profile_name %]</div>
			<p />
		
			<div [% IF assign_clip_id %] style="display: none" [% END %]>
			
				<div align="center">
					<b>clip filter</b>
				</div>
					
				<fieldset>
					<legend>source</legend>
					<table>
						[% FOREACH channel IN channels %]
							<tr>
								<td>
									<input
										type="checkbox"
										name="clip_source_to_show"
										value="[% channel.channel_id %]"
										checked="true"
										onchange="update_clip_list()"
									/>
								</td>
								<td>
									<span class="source_text">
										[% channel.source_label %]
										<!-- <br />
										[% channel.match_title %]
										-->
									</span>
								</td>
							</tr>
						[% END %]
						
							<tr>
								<td>
									<input
										type="checkbox"
										name="clip_source_to_show"
										value="NULL" 
										checked="true"
										onchange="update_clip_list()"
									/>
								</td>
								<td>
									<span class="source_text">
										upload
									</span>
								</td>
							</tr>
					</table>
				</fieldset>	
			
				<fieldset id="category_to_show_fieldset">
					<legend>category</legend>
					[% FOREACH value IN categories.keys %]
						<input
							type="checkbox"
							name="clip_category_to_show" 
							checked="true" 
							onchange="update_clip_list()" 
							value="[%- value -%]" 
						/>[%- HTML.escape(categories.$value) -%]<br />
					[% END %]
				</fieldset>
				
			</div>
			
			<hr />
			
			<span class="menu_links">
				<a href="/channels/list" class="menu_links">channels</a><br />
				<a href="/ui/upload_clip">upload clip</a><br />
				<a href="/ui/player">audio editor</a>
			</span>
			<hr />

		</div>
	
	
		<div id="body_container">
		
			<div id="button_container" style="display: block">
			
			
				<table id="button_box" class="button_box">
				
					[% FOREACH row IN buttons %]
					<tr>
					
						[% FOREACH button IN row %]
						<td id="button_[% button.button_id %]" width="20%" class="button_box">
						
							<div
								class="button_box_button"
								id="button_box_button_[% button.button_id %]"
								onclick="click_button([% button.button_id %])"
							>
						
								<div class="button_box_title" id="button_box_title_[% button.button_id %]"></div>
								<div class="button_box_duration" id="button_box_duration_[% button.button_id %]"></div>


								<span hidden="hidden" id="button_box_links_[% button.button_id %]">
									<div class="button_box_clear_link">
										<a href="javascript:clear_button([% button.button_id %])">clear</a>
									</div>
									<div class="button_box_download_link">
										<a href="javascript:download_button([% button.button_id %])">download</a>
									</div>
									<div class="button_box_play_link">
										<a
											href="javascript:play_button([% button.button_id %])"
											id="button_box_play_link_[% button.button_id %]"
										>play</a>
									</div>
								</span>

							</div>
						</td>
						[% END %]
						
						
					</tr>				
					[% END %]
				<table>
			
				<!--
				<button type="button" onclick="update_buttons()">refresh buttons</button>
				<button type="button" onclick="update_clip_list()">refresh clip list</button>
				-->
				
				<!-- This ontains the form used to display status feedback when clips are created.
				     It is hidden until the create clip button is pressed. Message is populated dynamically
				-->
				<div 
					id="progress_message_container"
					class="assign_clips_user_message"
				/>
						
			</div>
			
			<hr />
			
			
			</div>

				
			<!-- Player is not visible - controlled by javascript -->
			<audio id="player">
				<!-- source populated dynamically by javascript -->
			</audio>

			
			<!-- This div contains the list of marked clips, which can be selected for editing.
			-->
			<div class="clip_list_container" id="clip_list_container" align="center">

				<div class="clip_list_heading_links">
					<a href="javascript:delete_selected_clips()">delete selected</a>
				</div>

				<div class="clip_list_div">
					<table id="clip_list" class="clip_list">
					
						<tr class="title_row">
							<th class="clip_list_checkbox"></th>
							<th class="clip_list_assign"></th>
							<!-- <th class="clip_list_delete"></th> -->
							<th class="clip_list_play"></th>
							<th class="clip_list_download"></th>
							<th class="clip_list_rename"></th>
							<th class="clip_list_title">title</th>
							<th class="clip_list_source">source</th>
							<th class="clip_list_category">category</th>
							<th class="clip_list_date">date</th>
							<th class="clip_list_time">time</th>
							<th class="clip_list_duration">duration</th>
						</tr>

						<!-- data rows will be populated dynamically -->
					</table>
				</div>
			<div>
			
		</div>


		<script type="text/javascript">

			/* Indicates which clip_id we are in the process of assigning, 0 if none */
			var assigning_clip_id = 0;
			var playing_clip_id = 0;
			var playing_button_id = 0;
			var duration_original_html;
			
			/* If a specific clip_id is specified, display only that clip and select it for assignment */
			var assign_clip_id = [% assign_clip_id %];
			var assign_clip_title = '';
			
			/* Timer to update the buttons */
			var run_poll_ajax_timer = true;
			var poll_ajax_timer;
			update_buttons();
			update_clip_list();

			/* Define handlers for player events */
			var player = document.getElementById("player");

			player.addEventListener(
				"timeupdate",
				function(event) {

					/* Handle possibility that player hasn't yet initialised
					 * which can result in NaN being returned as time properties
					 */
					var current_seconds = player.currentTime;
					var duration_seconds = player.duration;
					if(isNaN(current_seconds) || isNaN(duration_seconds)) {
						return;
					}
				
					var seconds_remaining = duration_seconds - current_seconds;
					var duration_html = seconds_to_mins_secs(seconds_remaining);
										
					if(playing_button_id) {
						var node = document.getElementById("button_box_duration_" + playing_button_id);
						node.innerHTML = duration_html;
					}
					
					if(playing_clip_id) {
						var node = document.getElementById("clip_duration_" + playing_clip_id);
						node.innerHTML = duration_html;
					}
				}
			);
				
			player.addEventListener(
				"pause",
				function(event) {
 					clear_player();
				}
			);
			
			player.addEventListener(
				"canplay",
				function(event) {
 					player.play();
				}
			);
			

			function clear_player() {
			
				player.pause();

				if(playing_button_id) {
					var duration_node = document.getElementById("button_box_duration_" + playing_button_id);
					if(duration_node) {
						duration_node.innerHTML = duration_original_html;
					}
					
					/* Reset style to normal, non-playing button */
					var button_node = document.getElementById("button_box_button_" + playing_button_id);
					if(button_node) {
						button_node.setAttribute("class", "button_box_button");
					}

					/* Reset 'pause' button to 'play' */
					var play_link = document.getElementById("button_box_play_link_" + playing_button_id);
					if(play_link) {
						play_link.innerHTML = 'play';
					}
				}
				
				if(playing_clip_id) {
				
					/* Highlight relevant table row */
					var row_node = document.getElementById("clip_row_" + playing_clip_id);
					if(row_node) {
						row_node.setAttribute("class", "clip_row");
					}
										
					/* Reset 'stop' button to 'play' */
					var play_link = document.getElementById("clip_play_link_" + playing_clip_id);
					if(play_link) {
						play_link.innerHTML = 'play';
					}
					
					/* Reset duration text */
					var duration_node = document.getElementById("clip_duration_" + playing_clip_id);
					if(duration_node) {
						duration_node.innerHTML = duration_original_html;
					}
				}				
				
				playing_clip_id = 0;
				playing_button_id = 0;
				duration_original_html = "";
			}
			
		
			function update_buttons() {
			
				//TODO - check that the clip we're playing/assigning hasn't been deleted
			
				/* Fire off asynchronous request to server */
				var request = new XMLHttpRequest();
				
				/* Define handler to deal with response */
				request.onreadystatechange = function() {
				
					if (request.readyState != 4) {
						/* Request has not yet completed */
						return;
					}
				
					if(request.status == 200) {
						/* Extract and parse payload */
						var json_data = JSON.parse(request.responseText);
						populate_button_box_from_json(json_data);
					}

					/* Free Up HTTP request object */
					delete request;
				}
			
				/* Send request */
				var url = "/button_box/buttons_json";
				request.open("GET", url, true);
				request.send();
			}
		
		
			function populate_button_box_from_json(json_data) {
			
				for (var button_id in json_data) {
					
					/* Skip private object meta properties */
					if (!json_data.hasOwnProperty(button_id)) {
						next;
					}
					
					button = json_data[button_id];
					
					/* Update Title */
					var node;
					node = document.getElementById('button_box_title_' + button.button_id);
					node.innerHTML = button.title;
					
					/* Update Duration */
					node = document.getElementById('button_box_duration_' + button.button_id);
					if(button.clip_id) {
						node.innerHTML = seconds_to_mins_secs(button.duration_seconds);
					}
					else {
						node.innerHTML = "";
					}
					
					/* Update style class, except if this is the button we are assigning
					 * in which case we want to leave the style alone as it is set by
					 * the assigning process */
					if(assigning_clip_id != button.clip_id) {
						node = document.getElementById("button_box_button_" + button.button_id);
						node.setAttribute("class", "button_box_button");
					}

					/* Hide links if no clip is assigned, un-hide if clip is assigned to this button */
					node = document.getElementById("button_box_links_" + button.button_id);
					if(button.clip_id) {
						node.removeAttribute("hidden");
					}
					else {
						node.setAttribute("hidden", "hidden");
					}
				}
			}
		
		
			function update_clip_list() {
			
				cancel_assign_clip();
			
				/* Fire off asynchronous request to server */
				var request = new XMLHttpRequest();
				
				/* Define handler to deal with response */
				request.onreadystatechange = function() {
				
					if (request.readyState != 4) {
						/* Request has not yet completed */
						return;
					}
				
					if(request.status == 200) {
						var json_data = JSON.parse(request.responseText);
						populate_clip_list_from_json(json_data);

						/* If page is loaded with assign_clip_id defined, that
						 * means we should select that clip for assignment
						 */
						if( [% assign_clip_id %] ) {
							assign_clip( [% assign_clip_id %], assign_clip_title );
						}
					}

					/* Free Up HTTP request object */
					delete request;
				}
			
				/* Send request */
				var url = (
					"/clips/all?category=" +
					get_clip_list_category_filters() + 
					"&channel_id=" + 
					get_clip_list_source_filters()
				);
				
				/* If page is loaded with assign_clip_id defined, that
				 * means we should load just that clip into the list 
				 */
				if( [% assign_clip_id %] ) {
					url = "/clips/all?clip_id=" + [% assign_clip_id %];
				}
				
				request.open("GET", url, true);
				request.send();
			}
		
		
			function get_clip_list_category_filters() {
			
				/* Read status of filter checkboxes and return a corresponding query string */
				var checkboxes = document.getElementsByName("clip_category_to_show");
				var status_list = "";
				
				for( var i = 0; i < checkboxes.length; i ++ ) {
					if(checkboxes[i].checked) {
						status_list += "," + checkboxes[i].value;
					}
				}
				
				/* Always include user upload */
				status_list += "," + 'user_upload';
				
				/* Strip off initial ',' */
				status_list = status_list.substr(1);
				return status_list;
			}
			
			
			function get_clip_list_source_filters() {
			
				/* Read status of filter checkboxes and return a corresponding query string */
				var checkboxes = document.getElementsByName("clip_source_to_show");
				var list = "";
				
				for( var i = 0; i < checkboxes.length; i ++ ) {
					if(checkboxes[i].checked) {
						list += "," + checkboxes[i].value;
					}
				}
				
				/* Strip off initial ',' */
				list = list.substr(1);
				return list;
			}
		
		
			function populate_clip_list_from_json(json_data) {
			
				var table = document.getElementById("clip_list");
				var rows = table.rows;
				
				/* Loop through current table to remove redundant rows.
				 * Work through table rows from highest index, otherwise
				 * the indexes will start moving around beneath our feet
				 * as we delete a row and the others all shift up by one
				 * position. Don't test index 0 as this is the title row.
				 */
				for (var i = (rows.length - 1); i > 0; i--) {
					/* Actually, for now, just delete all existing rows and re-populate later */
					table.deleteRow(i);
				}
			
				/* Then update/create needed rows */
				for (var clip_id in json_data) {
					
					/* Skip private object meta properties */
					if (!json_data.hasOwnProperty(clip_id)) {
						next;
					}
				
					populate_clip_row( json_data[clip_id] );
					
					/* Capture the title of this clip for later use, if assigning a single clip */
					if( [% assign_clip_id %] && clip_id == [% assign_clip_id %] ) {
						assign_clip_title = json_data[clip_id].title;
					}
				}
				
				/* If we are playing a clip during the refresh, check that it
				 * still exista after the refresh. Otherwise stop playing and
				 * clear the player */
				if(playing_clip_id) {
					var node = document.getElementById("clip_row_" + playing_clip_id);
					if(!node) {
						/* Clip has been removed */
						clear_player();
					}
				}
			}
		
		
			function populate_clip_row(clip_row) {
			
				var table = document.getElementById("clip_list");
				var row_id = "clip_row_" + clip_row.clip_id;
			
				/* Look to see if we already have a row for this event_row_id */
				var row = table.rows.namedItem(row_id);

				if(!row) {
					/* Not an existing row, insert one after header row */
					row = table.insertRow(1);
					row.id = row_id;
					
					/* The table has 11 cells/fields */
					for( var i = 0; i < 11; i ++  ) {
						row.insertCell(-1);
					}
					
					/* These elements are invariant. so only populate when row is created */
					row.setAttribute("class", "clip_row");
				}
				
				/* Update/populate the fields */
				var i = 0;
				row.cells.item(i).innerHTML = '<input type="checkbox" name="clip_row_selected" value="' + clip_row.clip_id + '" id="clip_row_selected_' + clip_row.clip_id + '">';   // checkbox
				row.cells.item(i).setAttribute("class", "clip_list_checkbox");
				i++;	
				row.cells.item(i).appendChild( generate_assign_link(clip_row) );   // Assign
				row.cells.item(i).setAttribute("class", "clip_list_assign");
				i++;
				//row.cells.item(i).appendChild( generate_delete_link(clip_row) );   // Delete
				//row.cells.item(i).setAttribute("class", "clip_list_delete");
				//i++;
				row.cells.item(i).appendChild( generate_play_link(clip_row) );     // Play
				row.cells.item(i).setAttribute("class", "clip_list_play");
				i++;
				row.cells.item(i).appendChild( generate_download_link(clip_row) ); // Download
				row.cells.item(i).setAttribute("class", "clip_list_download");
				i++;
				row.cells.item(i).appendChild( generate_rename_link(clip_row) );   // Rename
				row.cells.item(i).setAttribute("class", "clip_list_rename");
				i++;
				row.cells.item(i).innerHTML = clip_row.title;        // Title
				row.cells.item(i).setAttribute("class", "clip_list_title");
				i++;
				row.cells.item(i).innerHTML = clip_row.source;       // Source
				row.cells.item(i).setAttribute("class", "clip_list_source");
				i++;
				row.cells.item(i).innerHTML = clip_row.category;     // Category
				row.cells.item(i).setAttribute("class", "clip_list_category");
				i++;
				row.cells.item(i).innerHTML = clip_row.display_date; // Date
				row.cells.item(i).setAttribute("class", "clip_list_date");
				i++;
				row.cells.item(i).innerHTML = clip_row.display_time; // Time
				row.cells.item(i).setAttribute("class", "clip_list_time");
				i++;
				row.cells.item(i).innerHTML = seconds_to_mins_secs(clip_row.duration_seconds); // Duration
				row.cells.item(i).setAttribute("class", "clip_list_duration");
				row.cells.item(i).setAttribute("id", "clip_duration_" + clip_row.clip_id);
				
				/* Highlight row if it is playing */
				if(playing_clip_id == clip_row.clip_id) {
					
					/* Highlight relevant table row */
					var row_node = document.getElementById("clip_row_" + clip_row.clip_id);
					row_node.setAttribute("class", "play_row");
					
					/* change 'play' button to 'stop' */
					var play_node = document.getElementById("clip_play_link_" + clip_row.clip_id);
					play_node.innerHTML = "stop";				
				}
				
			}
		
		
			function generate_assign_link(clip_row) {
			
 				var a = document.createElement('a');
 				a.setAttribute('href', '');
 				a.appendChild(document.createTextNode('assign'));
 				a.addEventListener(
 					"click",
 					function(event) {
 						assign_clip(clip_row.clip_id, clip_row.title);
 						event.preventDefault();
 					}
 				);
 				a.setAttribute("id", "clip_assign_link_" + clip_row.clip_id);
				
 				return a;
			}
			
			
			function generate_delete_link(clip_row) {
			
 				var a = document.createElement('a');
 				a.setAttribute('href', '');
 				a.appendChild(document.createTextNode('delete'));
 				a.addEventListener(
 					"click",
 					function(event) {
 						delete_clip(clip_row.clip_id);
 						event.preventDefault();
 					}
 				);
 				
 				return a;
			}			
			

			function generate_play_link(clip_row) {
			
 				var a = document.createElement('a');
 				a.setAttribute('href', '');
 				a.appendChild(document.createTextNode('play'));
 				a.addEventListener(
 					"click",
 					function(event) {
 						play_clip(clip_row.clip_id);
 						event.preventDefault();
 					}
 				);
 				a.setAttribute("id", "clip_play_link_" + clip_row.clip_id);
 				
 				return a;
			}
			
			function generate_download_link(clip_row) {
			
 				var a = document.createElement('a');
 				a.setAttribute('href', '');
 				a.appendChild(document.createTextNode('download'));
 				a.addEventListener(
 					"click",
 					function(event) {
 						download_clip(clip_row.clip_id);
 						event.preventDefault();
 					}
 				);
 				a.setAttribute("id", "clip_download_link_" + clip_row.clip_id);
 				
 				return a;
			}			
			
			function generate_rename_link(clip_row) {
			
 				var a = document.createElement('a');
 				a.setAttribute('href', '');
 				a.appendChild(document.createTextNode('rename'));
 				a.addEventListener(
 					"click",
 					function(event) {
 						window.location.href = "/ui/rename_clip/" + clip_row.clip_id;
 						event.preventDefault();
 					}
 				);
 				a.setAttribute("id", "clip_rename_link_" + clip_row.clip_id);
 				
 				return a;
			}			


			function delete_clip(clip_list) {
		
				/* This accepts either a single clip_id, or a
				 * comma-separated list of clips.
				 */			
				var clips = clip_list.split(",", clip_list);
				for(var i = 0; i < clips.length; i++) {
				
					alert(clips[i]);
	
					if(clips[i] == playing_clip_id) {
						clear_player();
					}
					
					if(clips[i] == assigning_clip_id) {
						cancel_assign_clip();
					}			
				}

				/* Fire off asynchronous request to server */
				var request = new XMLHttpRequest();
				request.onreadystatechange = function() {
				
					if (request.readyState != 4) {
						/* Request has not yet completed */
						return;
					}
				
					if(request.status == 200) {
						/* Success */
						update_clip_list();
					}

					/* Free Up HTTP request object */
					delete request;
				}
			
				/* Send request */
				var url = "/clips/delete/" + clip_list;
				request.open("GET", url, true);
				request.send();				
			}
		

			function cancel_assign_clip() {
			
				/* If we are already assigning a clip, cancel it */
				if(assigning_clip_id > 0) {
					
					/* Unset row highlighting */
					var row = document.getElementById("clip_row_" + assigning_clip_id);
					if(row) {
						row.setAttribute("class", "clip_row");
					};
			
					/* Change 'cancel' button back to 'assign' */
					var assign_node = document.getElementById("clip_assign_link_" + assigning_clip_id);
					if(assign_node) {
						assign_node.innerHTML = 'assign';
					}
			
					assigning_clip_id = 0;
				}
				
				/* Clear message */
				set_user_message("");
								
				assign_clip_id = 0;
			}
		
		
			function assign_clip(clip_id, clip_title) {
			
				if(assigning_clip_id == clip_id) {
					/* Already assigning this clip, so CANCEL action */
					cancel_assign_clip();
					clear_player();
					return;
				}
					
				/* Cancel any assignment already in progress */
				cancel_assign_clip();
				clear_player();
			
				/* Set global flag */
				assigning_clip_id = clip_id;
			
				/* Highlight clip row  */
				var row = document.getElementById("clip_row_" + clip_id);
				if(row) {
					row.setAttribute("class", "assign_row");
				}
				
				/* Change 'cancel' button back to 'assign' */
				var assign_node = document.getElementById("clip_assign_link_" + clip_id);
				if(assign_node) {
					assign_node.innerHTML = 'cancel';
				}
				
				/* Set user message */
				set_user_message (
					"click on one of the player hotkey buttons above to load with clip <i>" +
					clip_title +
					"</i>"
				);
			}			
			
			
			function zero_pad(n, desired_length) {
				/* Given a string and desired length, keep adding '0' to the start
				 * until the desired length is attained. Used for zero-padding numbers
				 */
				 
				/* Coerce number into a string */
				n = "" + n;
				
				/* Keep adding zeros to the front until we have desired length */
				while( n.length < desired_length) {
					n = "0" + n;	
				}
				return n;			
			}
		
		
			function clear_button(button_id) {

				/* If we are playing this button, stop it before clearing */
				if(playing_button_id == button_id) {
					clear_player();
				}
			
				/* Highlight Button Clicked */
				var node = document.getElementById("button_box_button_" + button_id);
				node.setAttribute("class", "button_box_button_clearing");
			
				/* Fire off asynchronous request to server */
				var request = new XMLHttpRequest();
				
				/* Define handler to deal with response */
				request.onreadystatechange = function() {
				
					if (request.readyState != 4) {
						/* Request has not yet completed */
						return;
					}
				
					if(request.status == 200) {
						var json_data = JSON.parse(request.responseText);
						populate_button_box_from_json(json_data);
						update_clip_list();
					}

					/* Free Up HTTP request object */
					delete request;
				}
			
				/* Send request */
				var url = "/button_box/clear_button/" + button_id;
				request.open("GET", url, true);
				request.send();			
			}

			
			function download_button(button_id) {
			
				var audio_url = "/button_box/audio/" + button_id;
				window.open(audio_url, "_self");			
			}
						
			
			function play_button(button_id) {
			
				if(playing_button_id == button_id) {
					clear_player();
					return;				
				}
			
				clear_player();
			
				/* Highlight Button Clicked */
				var button_node = document.getElementById("button_box_button_" + button_id);
				button_node.setAttribute("class", "button_box_button_playing");
				
				var duration_node = document.getElementById("button_box_duration_" + button_id);
				var audio_url = "/button_box/audio/" + button_id;
				duration_original_html = duration_node.innerHTML;
				playing_button_id = button_id;
				player.src = audio_url;
				
				/* Change link from 'play' to 'stop' */
				var play_link = document.getElementById("button_box_play_link_" + playing_button_id);
				play_link.innerHTML = 'stop';
			}
			
			
			function click_button(button_id) {

				/* Clicking on a button assigns a clip, but only if a clip is already selected */
				if(assigning_clip_id == 0) {
					return;
				}
			
				/* Highlight Button Clicked */
				var node = document.getElementById("button_box_button_" + button_id);
				node.setAttribute("class", "button_box_button_assigning");
			
				assign_clip_to_button(assigning_clip_id, button_id, button);
				cancel_assign_clip();
			}
			
			
			function assign_clip_to_button(clip_id, button_id, button) {
										
				/* Fire off asynchronous request to server */
				var request = new XMLHttpRequest();
				request.onreadystatechange = function() {
				
					if (request.readyState != 4) {
						/* Request not yet complete */
						return;
					}
				
					if(request.status == 200) {
						/* success */
						update_buttons();
						set_user_message("");
					
						/* Set timeout to clear user message */
						message_timeout = setTimeout(
							function() {
								/* If page is loaded with assign_clip_id defined, that
								* means we are only assigning a single clip, so return to player */
								if([% assign_clip_id %]) {
									assign_clip_id = 0;
									window.location.href = "/ui/assign_clips";
								}
							
								assign_clip_id = 0;
							},
							500
						);
					
						update_clip_list(); // has side-effect of clearing user message
					}
					else {
						/* some kind of error occurred */
						set_user_message("error saving clip to button");
					}
					
					delete request;
				}

				set_user_message("saving clip to button, please wait...");
				
				/* Send request */
				var url = "/button_box/assign/" + button_id + "/" + clip_id;
				request.open("GET", url, true);
				request.send();				
			}
			
			
			function play_clip(clip_id) {
			
				/* If we are already playing, stop */
				if(playing_clip_id == clip_id) {
					clear_player();
					return;				
				}
			
				clear_player();
				cancel_assign_clip();
				
				/* Highlight relevant table row */
				var row_node = document.getElementById("clip_row_" + clip_id);
				row_node.setAttribute("class", "play_row");
				
				/* change 'play' button to 'stop' */
				var play_node = document.getElementById("clip_play_link_" + clip_id);
				play_node.innerHTML = "stop";
				
				/* Save duration column while we use it for countdown */
				var duration_node = document.getElementById("clip_duration_" + clip_id);
				duration_original_html = duration_node.innerHTML;				
				
				var audio_url = (
					"[% clip_url_prefix %]" +
					"/clip/[% c.session.profile_code %]/" +
					clip_id +
					".wav"
				)
				
				playing_clip_id = clip_id;
				player.src = audio_url;
				
			}
			
			
			function download_clip(clip_id) {
			
				var audio_url = (
					"[% clip_url_prefix %]" +
					"/clip/[% c.session.profile_code %]/" +
					clip_id +
					".wav"
				)

				window.open(audio_url, "_self");
			}
		
			
			function delete_selected_clips() {

				/* Build comma-separated list of selected clips */
				var clip_list = "";
				var checkboxes = document.getElementsByName("clip_row_selected");
				for(var i = 0; i < checkboxes.length; i++) {
					if(checkboxes[i].checked) {
						clip_list += checkboxes[i].value + ',';
					}
				}

				delete_clip(clip_list);
			}


			function seconds_to_mins_secs(seconds) {
			
				/* Given a number of seconds, returns a string in format M:SS */

				/* Return empty string if argument is non-numeric */
				if(isNaN(seconds)) {
					return "";
				}

				var minutes = Math.floor(seconds / 60);
				seconds = Math.floor(seconds % 60);
				var rv = minutes + ":" + zero_pad(seconds, 2);
				return rv;				
			}
			
			
			function set_user_message(message) {
				/* Set innerHTML of user message div */
				var node = document.getElementById("progress_message_container");
				node.innerHTML = message;
			}
		
		</script>


	</body>
</html>
	
