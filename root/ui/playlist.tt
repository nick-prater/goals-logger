<script src="//code.jquery.com/jquery-2.1.4.min.js"></script>
<script type="text/javascript" src="/waveform-playlist/js/waveform-playlist.var.js"></script>

<script type="text/javascript">
	var playlist = WaveformPlaylist.init({
		samplesPerPixel: 3000,
		waveHeight: 25,
		container: document.getElementById("playlist"),
		state: 'cursor',
		colors: {
			waveOutlineColor: '#E0EFF1',
			timeColor: 'grey',
			fadeColor: 'black'
		},
		timescale: true,
		controls: {
			show: true,
			width: 200
		},
		seekStyle : 'line',
		zoomLevels: [500, 1000, 3000, 5000]
	});

	/* Pointer to mixed audio after rendering */
	var rendered_audio = null;

	playlist.load(
		[% playlist.data || "[]" %]
	).then(function() {

		console.log("loaded playlist", playlist);

		if(playlist.tracks.length) {
			$("#empty_playlist_message").hide();
		}

		//initialize the WAV exporter.
		playlist.initExporter();
	});

	var playlist_id = [% playlist.id || 0 %];
	var playlist_name = '[% playlist.name.squote %]';
</script>

<script type="text/javascript" src="/waveform-playlist/js/emitter.js"></script>

<script type="text/javascript">
	console.log("including playlist");


	function assign_clip(clip_id, clip_title) {

		console.log("playlist::assign_clip()");

		var clip_row = document.getElementById("clip_row_" + clip_id);
		var clip_id = clip_row.dataset.clip_id;
		var title_html = clip_row.cells[5].innerHTML;

		var audio_url = (
			"[% clip_url_prefix %]" +
			"/clip/[% c.session.profile_code %]/" +
			clip_id +
			".wav"
		)

		ee.emit("newtrack", audio_url, title_html, playlist.duration);
		document.getElementById("empty_playlist_message").setAttribute("hidden", "hidden");
		console.log(playlist);
	}


	function render_wav() {

		$("#playlist_status_message").text("Rendering mixdown of playlist...");
		rendered_audio = null;
		ee.emit('startaudiorendering', 'wav');
	}


	/* Handle Save Button */
	$(".btn-save-playlist").on("click", function() {
		console.log("save_button");
		$("div.form_container").hide();
		show_save_dialog();
	});


	/* Handle Trim Button */
	$container.on("click", ".btn-trim-audio", function() {
		ee.emit("trim");
	});


	/* Handle Zoom Buttons */
	$(".btn-zoom-in").on("click", function() {
		ee.emit("zoomin");
	});

	$(".btn-zoom-out").on("click", function() {
		ee.emit("zoomout");
	});


	/* Handle Mode Buttons */
	$(".btn-select").on("click", function() {
		deselect_mode_buttons();
		$(this).addClass("active");
		ee.emit("statechange", "select");
	});

	$(".btn-shift").on("click", function() {
		deselect_mode_buttons();
		$(this).addClass("active");
		ee.emit("statechange", "shift");
	});


	/* Handle fade buttons */
	$("div.btn-fade-state-group").on("click", ".btn", function() {

		console.log("fade button click");
		console.log(this);
		var $el = $(this);


		/* Select appropriate cursor mode */
		if($el.hasClass("btn-fade-in")) {
			ee.emit("statechange", "fadein");
		}
		else if($el.hasClass("btn-fade-out")) {
			console.log("fade out");
			ee.emit("statechange", "fadeout");
		}

		/* Select appropriate fade curve */
		if($el.hasClass("btn-logarithmic")) {
			ee.emit("fadetype", "logarithmic");
		}
		else if ($el.hasClass("btn-linear")) {
			ee.emit("fadetype", "linear");
		}
		else if ($el.hasClass("btn-exponential")) {
			ee.emit("fadetype", "exponential");
		}
		else if ($el.hasClass("btn-scurve")) {
			ee.emit("fadetype", "sCurve");
		}

		/* Select this button */
		deselect_mode_buttons();
		$el.addClass("active");
	});


	/* Handle Export Button */
	$(".btn-export").on("click", function() {
		console.log("export_button");
		if(playlist_name) {
			$("#clip_title").val(playlist_name);
		}

		render_wav();
		$("#clip_metadata button.export_button").attr("disabled", "disabled");

		$("div.form_container").hide();
		$("#clip_metadata_container").show()
	});


	/* Handle Upload Button */
	$(".btn-upload").on("click", function() {
		console.log("upload_button");
		render_wav();
		display_upload_form();
	});


	/* Export sets of a background render task - handle completion */
	ee.on('audiorenderingfinished', function (type, data) {

		if (type != 'wav'){
			console.log("unexpected end to audio rendering: type=", type);
			return;
		}

		$("#playlist_status_message").text("Mixdown complete");
		$("#clip_metadata button.export_button").removeAttr("disabled");
		rendered_audio = data;

		if($("#media_code").attr("disabled") != "disabled") {
			console.log("wav rendering finished; media_codes loaded - enabling Upload button");
			$("#upload_playlist_container button.upload_button").removeAttr("disabled");
		}
		else {
			console.log("wav rendering finished, but still waiting for media_codes to load");
		};
	});


	/* Deselect all editor mode buttons */
	function deselect_mode_buttons() {
		$(".btn-fade-state-group .active").removeClass("active");
		$(".btn-playlist-state-group .active").removeClass("active");
	}



</script>
