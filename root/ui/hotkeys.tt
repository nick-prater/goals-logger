				<table id="button_box" class="button_box">

					[% FOREACH row IN buttons %]
					<tr>

						[% FOREACH button IN row %]
						<td id="button_[% button.button_id %]" width="20%" class="button_box">

							<div
								class="button_box_button"
								id="button_box_button_[% button.button_id %]"
								onclick="click_button([% button.button_id %])"
							>

								<div class="button_box_title" id="button_box_title_[% button.button_id %]"></div>
								<div class="button_box_duration" id="button_box_duration_[% button.button_id %]"></div>


								<span hidden="hidden" id="button_box_links_[% button.button_id %]">
									<div class="button_box_clear_link">
										<a href="javascript:clear_button([% button.button_id %])">clear</a>
									</div>
									<div class="button_box_download_link">
										<a href="javascript:download_button([% button.button_id %])">download</a>
									</div>
									<div class="button_box_play_link">
										<a
											href="javascript:play_button([% button.button_id %])"
											id="button_box_play_link_[% button.button_id %]"
										>play</a>
									</div>
								</span>

							</div>
						</td>
						[% END %]


					</tr>
					[% END %]
				</table>


<script type="text/javascript">
	console.log("including hotkeys");

	function update_buttons() {

		//TODO - check that the clip we're playing/assigning hasn't been deleted

		/* Fire off asynchronous request to server */
		var request = new XMLHttpRequest();

		/* Define handler to deal with response */
		request.onreadystatechange = function() {

			if (request.readyState != 4) {
				/* Request has not yet completed */
				return;
			}

			if(request.status == 200) {
				/* Extract and parse payload */
				var json_data = JSON.parse(request.responseText);
				populate_button_box_from_json(json_data);
			}

			/* Free Up HTTP request object */
			delete request;
		}

		/* Send request */
		var url = "/button_box/buttons_json";
		request.open("GET", url, true);
		request.send();
	}


	function populate_button_box_from_json(json_data) {

		for (var button_id in json_data) {

			/* Skip private object meta properties */
			if (!json_data.hasOwnProperty(button_id)) {
				next;
			}

			button = json_data[button_id];

			/* Update Title */
			var node;
			node = document.getElementById('button_box_title_' + button.button_id);
			node.innerText = button.title;

			/* Update Duration */
			node = document.getElementById('button_box_duration_' + button.button_id);
			if(button.clip_id) {
				node.innerText = seconds_to_hms(button.duration_seconds);
			}
			else {
				node.innerHTML = "";
			}

			/* Update style class, except if this is the button we are assigning
			 * in which case we want to leave the style alone as it is set by
			 * the assigning process */
			if(assigning_clip_id != button.clip_id) {
				node = document.getElementById("button_box_button_" + button.button_id);
				node.setAttribute("class", "button_box_button");
			}

			/* Hide links if no clip is assigned, un-hide if clip is assigned to this button */
			node = document.getElementById("button_box_links_" + button.button_id);
			if(button.clip_id) {
				node.removeAttribute("hidden");
			}
			else {
				node.setAttribute("hidden", "hidden");
			}
		}
	}


	function download_button(button_id) {

		var audio_url = "/button_box/audio/" + button_id;
		window.open(audio_url, "_self");
	}


	function play_button(button_id) {

		if(playing_button_id == button_id) {
			clear_player();
			return;
		}

		clear_player();

		/* Highlight Button Clicked */
		var button_node = document.getElementById("button_box_button_" + button_id);
		button_node.setAttribute("class", "button_box_button_playing");

		var duration_node = document.getElementById("button_box_duration_" + button_id);
		var audio_url = "/button_box/audio/" + button_id;
		duration_original_html = duration_node.innerHTML;
		playing_button_id = button_id;
		player.src = audio_url;

		/* Change link from 'play' to 'stop' */
		var play_link = document.getElementById("button_box_play_link_" + playing_button_id);
		play_link.innerText = 'stop';
	}


	function click_button(button_id) {

		/* Clicking on a button assigns a clip, but only if a clip is already selected */
		if(assigning_clip_id == 0) {
			return;
		}

		/* Highlight Button Clicked */
		var node = document.getElementById("button_box_button_" + button_id);
		node.setAttribute("class", "button_box_button_assigning");

		assign_clip_to_button(assigning_clip_id, button_id, button);
		cancel_assign_clip();
	}


	function clear_button(button_id) {

		/* If we are playing this button, stop it before clearing */
		if(playing_button_id == button_id) {
			clear_player();
		}

		/* Highlight Button Clicked */
		var node = document.getElementById("button_box_button_" + button_id);
		node.setAttribute("class", "button_box_button_clearing");

		/* Fire off asynchronous request to server */
		var request = new XMLHttpRequest();

		/* Define handler to deal with response */
		request.onreadystatechange = function() {

			if (request.readyState != 4) {
				/* Request has not yet completed */
				return;
			}

			if(request.status == 200) {
				var json_data = JSON.parse(request.responseText);
				populate_button_box_from_json(json_data);
				update_clip_list();
			}

			/* Free Up HTTP request object */
			delete request;
		}

		/* Send request */
		var url = "/button_box/clear_button/" + button_id;
		request.open("GET", url, true);
		request.send();
	}


	function assign_clip(clip_id, clip_title) {

		/* Cancel any assignment already in progress */
		cancel_assign_clip();
		clear_player();

		if(assigning_clip_id == clip_id) {
			/* Already assigning this clip, so CANCEL */
			return;
		}

		/* Set global flag */
		assigning_clip_id = clip_id;

		/* Highlight clip row  */
		var row = document.getElementById("clip_row_" + clip_id);
		if(row) {
			row.setAttribute("class", "assign_row");
		}

		/* Change 'cancel' button back to 'assign' */
		var assign_node = document.getElementById("clip_assign_link_" + clip_id);
		if(assign_node) {
			assign_node.innerText = 'cancel';
		}

		/* Set user message */
		set_user_message (
			"click on one of the player hotkey buttons above to load with clip <i>" +
			clip_title +
			"</i>"
		);
	}


	function assign_clip_to_button(clip_id, button_id, button) {

		/* Fire off asynchronous request to server */
		var request = new XMLHttpRequest();
		request.onreadystatechange = function() {

			if (request.readyState != 4) {
				/* Request not yet complete */
				return;
			}

			if(request.status == 200) {
				/* success */
				update_buttons();
				set_user_message("");

				/* Set timeout to clear user message */
				message_timeout = setTimeout(
					function() {
						/* If page is loaded with assign_clip_id defined, that
						* means we are only assigning a single clip, so return to player */
						if(assign_clip_id) {
							assign_clip_id = 0;
							window.location.href = "/ui/assign_clips";
						}

						assign_clip_id = 0;
					},
					500
				);

				update_clip_list(); // has side-effect of clearing user message
			}
			else {
				/* some kind of error occurred */
				set_user_message("error saving clip to button");
			}

			delete request;
		}

		set_user_message("saving clip to button, please wait...");

		/* Send request */
		var url = "/button_box/assign/" + button_id + "/" + clip_id;
		request.open("GET", url, true);
		request.send();
	}

</script>
